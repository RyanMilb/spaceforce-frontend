backup2.test.js

1.0

var Eth = require('ethjs');
const Web3 = require('web3');


class SendMessage {
    sendMesg(message) {
        // var web3;
        if (window.ethereum) {
            // eslint-disable-next-line no-undef  
            web3 = new Web3(window.ethereum);
            try {
                window.ethereum.enable().then(async function () {
                    // User has allowed account access to DApp...
                    console.log('Metamask access granted')
                    // console.log('Metamask access granted');
                    const toAddress = '0x9d75de4d310ddb796b158c9bb13acfc3edbcbfef'
                    const TokenAbi = require('./erc20abi.json');
                    const TokenAddress = "0xE41d2489571d322189246DaFA5ebDe1F4699F498";
                    // eslint-disable-next-line no-undef
                    const senderAddress = await web3.eth.getAccounts().then(function(data) {return data});
                    // var eth = new Eth(web3js.currentProvider);
                    // var token = eth.contract(TokenAbi).at(TokenAddress);
                    console.log('Starting Transfer...' + senderAddress)


                    // V 1+
                    // eslint-disable-next-line no-undef  
                    let contract = new web3.eth.Contract(TokenAbi, TokenAddress);
                    // Use BigNumber
                    // eslint-disable-next-line no-undef  
                    let decimals = web3.utils.toBN(18);
                    // eslint-disable-next-line no-undef
                    let amount = web3.utils.toBN(100);
                    // // calculate ERC20 token amount
                    // eslint-disable-next-line no-undef
                    let value = amount.mul(window.web3.utils.toBN(1).pow(decimals));
                    // // call transfer function
                    contract.methods.transfer(toAddress, value).send({ from: senderAddress })
                        .on('transactionHash', console.log);
                    console.log('Success')

                });
            } catch (e) {
                // User has denied account access to DApp...
                console.log('Metamask access denied: ' + e)
            }
        }



        // console.log('Attempting to transfer Tokens with web3 then Send Message in webhook.')
        // // console.log('Metamask access granted');
        // const toAddress = '0x9d75de4d310ddb796b158c9bb13acfc3edbcbfef'
        // const TokenAbi = require('./erc20abi.json');
        // const TokenAddress = "0xE41d2489571d322189246DaFA5ebDe1F4699F498";
        // // eslint-disable-next-line no-undef
        // const senderAddress = web3.eth.accounts[0];
        // // var eth = new Eth(web3js.currentProvider);
        // // var token = eth.contract(TokenAbi).at(TokenAddress);
        // console.log('Starting Transfer...' + senderAddress)


        // // Get ERC20 Token contract instance
        // // eslint-disable-next-line no-undef  
        // let contract = new web3.eth.Contract(TokenAbi, TokenAddress);
        // // Use BigNumber
        // // eslint-disable-next-line no-undef  
        // let decimals = web3.utils.toBN(18);
        // // eslint-disable-next-line no-undef
        // let amount = web3.utils.toBN(100);
        // // // calculate ERC20 token amount
        // // eslint-disable-next-line no-undef
        // let value = amount.mul(window.web3.utils.toBN(1).pow(decimals));
        // // // call transfer function
        // contract.methods.transfer(toAddress, value).send({ from: senderAddress })
        //     .on('transactionHash', function (hash) {
        //         console.log('Succes: ' + hash);
        //     });
        // console.log('Success')
        return;
        // token.transfer(toAddress, 1000000000000000000, { from: senderAddress }, function (err, result) {
        //     if (err) console.log(err)
        //     else {
        //         //Trigger webhook, sending message to que
        //         fetch('http://localhost:3000/webhook', {
        //             method: 'post',
        //             mode: 'cors',
        //             body: JSON.stringify({ "message": message, "senderID": senderAddress })
        //         }).then(function (response) {
        //             console.log('Response: ' + JSON.stringify(response.json()));
        //         });
        //     }
        // });

    }
}

export default SendMessage;



                    // V 1+
                    // eslint-disable-next-line no-undef  
                    // let contract = new web3.eth.Contract(TokenAbi, TokenAddress);
                    // // Use BigNumber
                    // // eslint-disable-next-line no-undef  
                    // let decimals = web3.utils.toBN(18);
                    // // eslint-disable-next-line no-undef
                    // let amount = web3.utils.toBN(100);
                    // // // calculate ERC20 token amount
                    // // eslint-disable-next-line no-undef
                    // let value = amount.mul(window.web3.utils.toBN(1).pow(decimals));
                    // // // call transfer function
                    // contract.methods.transfer(toAddress, value).send({ from: senderAddress })
                    //     .on('transactionHash', console.log);
                    // console.log('Success')





        // console.log('Attempting to transfer Tokens with web3 then Send Message in webhook.')
        // // console.log('Metamask access granted');
        // const toAddress = '0x9d75de4d310ddb796b158c9bb13acfc3edbcbfef'
        // const TokenAbi = require('./erc20abi.json');
        // const TokenAddress = "0xE41d2489571d322189246DaFA5ebDe1F4699F498";
        // // eslint-disable-next-line no-undef
        // const senderAddress = web3.eth.accounts[0];
        // // var eth = new Eth(web3js.currentProvider);
        // // var token = eth.contract(TokenAbi).at(TokenAddress);
        // console.log('Starting Transfer...' + senderAddress)


        // // Get ERC20 Token contract instance
        // // eslint-disable-next-line no-undef  
        // let contract = new web3.eth.Contract(TokenAbi, TokenAddress);
        // // Use BigNumber
        // // eslint-disable-next-line no-undef  
        // let decimals = web3.utils.toBN(18);
        // // eslint-disable-next-line no-undef
        // let amount = web3.utils.toBN(100);
        // // // calculate ERC20 token amount
        // // eslint-disable-next-line no-undef
        // let value = amount.mul(window.web3.utils.toBN(1).pow(decimals));
        // // // call transfer function
        // contract.methods.transfer(toAddress, value).send({ from: senderAddress })
        //     .on('transactionHash', function (hash) {
        //         console.log('Succes: ' + hash);
        //     });
        // console.log('Success')



        // token.transfer(toAddress, 1000000000000000000, { from: senderAddress }, function (err, result) {
        //     if (err) console.log(err)
        //     else {
        //         //Trigger webhook, sending message to que
        //         fetch('http://localhost:3000/webhook', {
        //             method: 'post',
        //             mode: 'cors',
        //             body: JSON.stringify({ "message": message, "senderID": senderAddress })
        //         }).then(function (response) {
        //             console.log('Response: ' + JSON.stringify(response.json()));
        //         });
        //     }
        // });